diff a/internal/ui/splash.go b/internal/ui/splash.go	(rejected hunks)
@@ -69,3 +67,74 @@ func (s *Splash) layoutLogo(t *tview.TextView, styles *config.Styles) {
 func (s *Splash) layoutRev(t *tview.TextView, rev string, styles *config.Styles) {
 	fmt.Fprintf(t, "[%s::b]Revision [red::b]%s", styles.Body().FgColor, rev)
 }
+
+// function to get the logo []string from the LogoUrl
+// by making a request to the LogoUrl
+func GetLogo(logoUrl string) {
+	slog.Debug("Fetching logo from URL", slog.String("url", logoUrl))
+    defaultLogo := []string{
+        ` ____  __ ________       `,
+        `|    |/  /   __   \______`,
+        `|       /\____    /  ___/`,
+        `|    \   \  /    /\___  \`,
+        `|____|\__ \/____//____  /`,
+        `         \/           \/ `,
+    }
+
+    if logoUrl == "" {
+        LogoSmall = defaultLogo
+        return
+    }
+
+    if strings.HasPrefix(logoUrl, "file:") {
+        filePath := strings.TrimPrefix(logoUrl, "file:")
+        body, err := os.ReadFile(filePath)
+        if err != nil {
+            slog.Error("Error reading logo from file", slog.String("file", filePath), slog.Any("error", err))
+            LogoSmall = defaultLogo
+            return
+        }
+        logo := strings.Split(string(body), "\n")
+        // last line is empty, remove it
+        if len(logo) > 0 && logo[len(logo)-1] == "" {
+            logo = logo[:len(logo)-1]
+        }
+        slog.Debug("Successfully fetched logo from file", slog.String("file", filePath))
+        LogoSmall = logo
+        return
+    }
+
+    resp, err := http.Get(logoUrl)
+    if err != nil {
+        slog.Error("Error fetching logo from URL", slog.String("url", logoUrl), slog.Any("error", err))
+        LogoSmall = defaultLogo
+        return
+    }
+    defer func() {
+        if resp != nil {
+            resp.Body.Close()
+        }
+    }()
+
+    if resp.StatusCode != http.StatusOK {
+        slog.Error("Non-OK HTTP status", slog.String("status", resp.Status))
+        LogoSmall = defaultLogo
+        return
+    }
+
+    body, err := io.ReadAll(resp.Body)
+    if err != nil {
+        slog.Error("Error reading response body", slog.Any("error", err))
+        LogoSmall = defaultLogo
+        return
+    }
+
+    logo := strings.Split(string(body), "\n")
+    // last line is empty, remove it
+    if len(logo) > 0 && logo[len(logo)-1] == "" {
+        logo = logo[:len(logo)-1]
+    }
+    slog.Debug("Successfully fetched logo from URL", slog.String("url", logoUrl))
+    LogoSmall = logo
+}
+
